from datetime import datetime, timezone, timedelta
from flask_login import UserMixin
from typing import Optional
import sqlalchemy as sa
import sqlalchemy.orm as so
from app_pkg import db, login
from werkzeug.security import generate_password_hash, check_password_hash
import secrets
#from time import time
#from flask import current_app
#import jwt

# create table flask_users(id number primary key, username text, email text, password_hash text, token text, token_expiration text);
# The below is generated by flask-migrate
# Adding UserMixin does not generate any changes
# CREATE TABLE flask_users (id INTEGER NOT NULL, username VARCHAR(64) NOT NULL, email VARCHAR(120) NOT NULL, password_hash VARCHAR(256), token VARCHAR(32),  token_expiration DATETIME, PRIMARY KEY (id));
class User(UserMixin, db.Model):
    __tablename__ = 'flask_users'
    id: so.Mapped[int] = so.mapped_column(primary_key=True)
    username: so.Mapped[str] = so.mapped_column(sa.String(64), index=True, unique=True)
    email: so.Mapped[str] = so.mapped_column(sa.String(120), index=True, unique=True)
    password_hash: so.Mapped[Optional[str]] = so.mapped_column(sa.String(256))
    token: so.Mapped[Optional[str]] = so.mapped_column(sa.String(32), index=True, unique=True)
    token_expiration: so.Mapped[Optional[datetime]]

    def __repr__(self):
        return '<User {}>'.format(self.username)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
    
    #def get_reset_password_token(self, expires_in=600):
        #return jwt.encode(
            #{'reset_password': self.id, 'exp': time() + expires_in},
            #current_app.config['SECRET_KEY'], algorithm='HS256')

    #@staticmethod
    #def verify_reset_password_token(token):
        #try:
            #id = jwt.decode(token, current_app.config['SECRET_KEY'], algorithms=['HS256'])['reset_password']
        #except Exception:
            #return
        #return db.session.get(User, id)
    
    def get_token(self, expires_in=3600):
        now = datetime.now(timezone.utc)
        if self.token and self.token_expiration > now + timedelta(seconds=60):
            return self.token
        self.token = secrets.token_hex(16)
        self.token_expiration = now + timedelta(seconds=expires_in)
        db.session.add(self)
        return self.token

    def revoke_token(self):
        self.token_expiration = datetime.now(timezone.utc) - timedelta(seconds=1)

    @staticmethod
    def check_token(token):
        user = db.session.scalar(sa.select(User).where(User.token == token))
        if user is None or user.token_expiration.replace(tzinfo=timezone.utc) < datetime.now(timezone.utc):
            return None
        return user


@login.user_loader
def load_user(id):
    return db.session.get(User, int(id))